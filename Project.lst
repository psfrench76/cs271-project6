Microsoft (R) Macro Assembler Version 14.37.32825.0	    12/07/23 14:34:03
&String Converter   (Proj6_frenchp.asm			     Page 1 - 1


				TITLE String Converter   (Proj6_frenchp.asm)

				; Author: Patrick French
				; Last Modified: 12-5-23
				; OSU email address: frenchp@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6            Due Date: 12-10-23
				; Description: TODO - description
				;
				; TODO
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 0000000B			STRING_SIZE		= 11 ; maximum length for user input string
 = 0000000C			STRING_BUFFER	= (STRING_SIZE + 1) ; user input string buffer length (includes null terminator)
 = 0000000A			INT_ARRAY_SIZE	= 10 ; size of integer array
 = 00000030			ASCII_0			= 48 ; ascii value for the character 0
 = 00000039			ASCII_9			= 57 ; ascii value for the character 9
 = 0000002B			ASCII_PLUS		= 43 ; ascii value for the character +
 = 0000002D			ASCII_MINUS		= 45 ; ascii value for the character -

				; ---------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prints a given prompt to the console, and stores the user's input to [userString]
				;
				; Preconditions: 
				;
				; Receives:
				; userPrompt	= (input) address of prompt string
				; userString	= (output) address of user string memory location
				; bytesRead		= (output) address of bytes read variable
				; STRING_SIZE and STRING_BUFFER are global variables
				;
				; returns: 
				; [userString]	= user string
				; [bytesRead]	= number of bytes read
				; ---------------------------------------------------------------------------------
				mGetString MACRO userPrompt, userString, bytesRead
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					mDisplayString userPrompt
					MOV		EDX, userString
					MOV		ECX, STRING_BUFFER
					CALL	ReadString
					MOV		EDI, [bytesRead]
					MOV		[EDI], EAX
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints the string stored at a given memory address to console
				;
				; Preconditions: The string at stringAddr must be null-terminated
				;
				; Receives:
				; stringAddr	= address of string to display
				;
				; returns: None
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO stringAddr
					PUSH	EDX

					MOV		EDX, stringAddr
					CALL	WriteString

					POP		EDX
				ENDM

 00000000			.data
 00000000 53 74 72 69 6E	programIntro	BYTE "String Converter, by Patrick French",13,10,13,10,0
	   67 20 43 6F 6E
	   76 65 72 74 65
	   72 2C 20 62 79
	   20 50 61 74 72
	   69 63 6B 20 46
	   72 65 6E 63 68
	   0D 0A 0D 0A 00
 00000028 50 6C 65 61 73	instructions1	BYTE "Please provide 10 signed integers, in the range [-2,147,483,648 : +2,147,483,647] (inclusive).",13,10,0
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 73 2C 20
	   69 6E 20 74 68
	   65 20 72 61 6E
	   67 65 20 5B 2D
	   32 2C 31 34 37
	   2C 34 38 33 2C
	   36 34 38 20 3A
	   20 2B 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 37
	   5D 20 28 69 6E
	   63 6C 75 73 69
	   76 65 29 2E 0D
	   0A 00
 00000089 49 20 77 69 6C	instructions2	BYTE "I will then display the numbers, their sum, and their (truncated) average.",13,10,13,10,0
	   6C 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 20
	   74 68 65 20 6E
	   75 6D 62 65 72
	   73 2C 20 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 28
	   74 72 75 6E 63
	   61 74 65 64 29
	   20 61 76 65 72
	   61 67 65 2E 0D
	   0A 0D 0A 00
 000000D8 50 6C 65 61 73	prompt			BYTE "Please enter a signed integer: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 69 6E 74
	   65 67 65 72 3A
	   20 00
 000000F8 45 72 72 6F 72	error			BYTE "Error: Invalid input.",13,10,0
	   3A 20 49 6E 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2E 0D 0A 00
 00000110 59 6F 75 20 65	summary			BYTE "You entered these numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 0000012D 54 68 65 20 73	sumText			BYTE "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 0000014B 54 68 65 20 74	avgText			BYTE "The truncated average of these numbers is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 6F 66 20
	   74 68 65 73 65
	   20 6E 75 6D 62
	   65 72 73 20 69
	   73 3A 20 00
 00000177 0D 0A 48 61 76	farewell		BYTE 13,10,"Have a nice day!",13,10,13,10,0
	   65 20 61 20 6E
	   69 63 65 20 64
	   61 79 21 0D 0A
	   0D 0A 00
 0000018E 2C 20 00		delimiter		BYTE ", ",0
 00000191 0D 0A 00		linebreak		BYTE 13,10,0

 00000194			intString		BYTE STRING_BUFFER DUP(0)

 000001A0 FFFFFFFF		userInt			SDWORD -1
 000001A4			intArray		SDWORD INT_ARRAY_SIZE DUP(?)
 000001CC 00000000		sumValue		SDWORD 0
 000001D0 FFFFFFFF		avgValue		SDWORD -1
 000001D4 00000000		userLength		DWORD 0

 00000000			.code
				; ---------------------------------------------------------------------------------
				; Name: main
				;
				; TODO - Description
				; ---------------------------------------------------------------------------------
 00000000			main PROC
				; --------------------------
				; Introduces program, prints instructions
				; --------------------------
					mDisplayString OFFSET programIntro
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET programIntro
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					mDisplayString OFFSET instructions1
 0000000C  52		     1		PUSH	EDX
 0000000D  BA 00000028 R     1		MOV		EDX, OFFSET instructions1
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX
					mDisplayString OFFSET instructions2
 00000018  52		     1		PUSH	EDX
 00000019  BA 00000089 R     1		MOV		EDX, OFFSET instructions2
 0000001E  E8 00000000 E     1		CALL	WriteString
 00000023  5A		     1		POP		EDX

				; --------------------------
				; Collects user input, validates, stores
				; --------------------------
 00000024  B9 0000000A			MOV		ECX, INT_ARRAY_SIZE
 00000029  BF 000001A4 R		MOV		EDI, OFFSET intArray
 0000002E			_getNumber:
 0000002E  68 000000F8 R		PUSH	OFFSET error
 00000033  68 000001D4 R		PUSH	OFFSET userLength
 00000038  68 000000D8 R		PUSH	OFFSET prompt
 0000003D  68 00000194 R		PUSH	OFFSET intString
 00000042  68 000001A0 R		PUSH	OFFSET userInt
 00000047  E8 000000C4			CALL	ReadVal
 0000004C  A1 000001A0 R		MOV		EAX, userInt
 00000051  89 07			MOV		[EDI], EAX
 00000053  83 C7 04			ADD		EDI, TYPE intArray
 00000056  E2 D6			LOOP	_getNumber

				; --------------------------
				; Displays numbers, calculates and displays sum and average,
				; and says goodbye
				; --------------------------
					mDisplayString OFFSET summary
 00000058  52		     1		PUSH	EDX
 00000059  BA 00000110 R     1		MOV		EDX, OFFSET summary
 0000005E  E8 00000000 E     1		CALL	WriteString
 00000063  5A		     1		POP		EDX

 00000064  B9 0000000A			MOV		ECX, INT_ARRAY_SIZE
 00000069  BE 000001A4 R		MOV		ESI, OFFSET intArray
 0000006E			_displayNumbers:
 0000006E  FF 36			PUSH	[ESI]
 00000070  68 00000194 R		PUSH	OFFSET intString
 00000075  E8 0000013F			CALL	WriteVal
 0000007A  83 F9 01			CMP		ECX, 1
 0000007D  7E 0C			JLE		_skipDelimiter
					mDisplayString OFFSET delimiter
 0000007F  52		     1		PUSH	EDX
 00000080  BA 0000018E R     1		MOV		EDX, OFFSET delimiter
 00000085  E8 00000000 E     1		CALL	WriteString
 0000008A  5A		     1		POP		EDX
 0000008B			_skipDelimiter:
 0000008B  83 C6 04			ADD		ESI, TYPE intArray
 0000008E  E2 DE			LOOP	_displayNumbers

					mDisplayString OFFSET linebreak
 00000090  52		     1		PUSH	EDX
 00000091  BA 00000191 R     1		MOV		EDX, OFFSET linebreak
 00000096  E8 00000000 E     1		CALL	WriteString
 0000009B  5A		     1		POP		EDX


					mDisplayString OFFSET sumText
 0000009C  52		     1		PUSH	EDX
 0000009D  BA 0000012D R     1		MOV		EDX, OFFSET sumText
 000000A2  E8 00000000 E     1		CALL	WriteString
 000000A7  5A		     1		POP		EDX
 000000A8  68 000001A4 R		PUSH	OFFSET intArray
 000000AD  6A 0A			PUSH	INT_ARRAY_SIZE
 000000AF  68 000001CC R		PUSH	OFFSET sumValue
 000000B4  E8 000001AB			CALL	ArraySum

 000000B9  FF 35 000001CC R		PUSH	sumValue
 000000BF  68 00000194 R		PUSH	OFFSET intString
 000000C4  E8 000000F0			CALL	WriteVal

					mDisplayString OFFSET linebreak
 000000C9  52		     1		PUSH	EDX
 000000CA  BA 00000191 R     1		MOV		EDX, OFFSET linebreak
 000000CF  E8 00000000 E     1		CALL	WriteString
 000000D4  5A		     1		POP		EDX

					mDisplayString OFFSET avgText
 000000D5  52		     1		PUSH	EDX
 000000D6  BA 0000014B R     1		MOV		EDX, OFFSET avgText
 000000DB  E8 00000000 E     1		CALL	WriteString
 000000E0  5A		     1		POP		EDX

					; TODO - calculate avgValue from sumValue

 000000E1  FF 35 000001D0 R		PUSH	avgValue
 000000E7  68 00000194 R		PUSH	OFFSET intString
 000000EC  E8 000000C8			CALL	WriteVal

					mDisplayString OFFSET linebreak
 000000F1  52		     1		PUSH	EDX
 000000F2  BA 00000191 R     1		MOV		EDX, OFFSET linebreak
 000000F7  E8 00000000 E     1		CALL	WriteString
 000000FC  5A		     1		POP		EDX

					mDisplayString OFFSET farewell
 000000FD  52		     1		PUSH	EDX
 000000FE  BA 00000177 R     1		MOV		EDX, OFFSET farewell
 00000103  E8 00000000 E     1		CALL	WriteString
 00000108  5A		     1		POP		EDX

					Invoke ExitProcess,0	; exit to operating system
 00000109  6A 00	   *	    push   +000000000h
 0000010B  E8 00000000 E   *	    call   ExitProcess
 00000110			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Prompts user for an input string, validates that it is a valid signed integer, and
				; converts it to a signed integer and stores it in a variable given by [ebp+8]
				;
				; Receives:
				; [ebp+24]		= address of error string for invalid input
				; [ebp+20]		= address of string length variable
				; [ebp+16]		= address user prompt string
				; [ebp+12]		= address of integer string
				; [ebp+8]		= address of sdword output variable to store result
				; STRING_SIZE, STRING_BUFFER, ASCII_0, ASCII_9, ASCII_PLUS, and ASCII_MINUS are global constants
				;
				; returns: input from user stored to [[ebp+8]]
				; ---------------------------------------------------------------------------------
 00000110			ReadVal PROC
 00000110  55				PUSH	EBP
 00000111  8B EC			MOV		EBP, ESP
 00000113  60				PUSHAD
 00000114			_getNewString:
					mGetString [EBP+16], [EBP+12], [EBP+20]
 00000114  52		     1		PUSH	EDX
 00000115  51		     1		PUSH	ECX
 00000116  50		     1		PUSH	EAX
 00000117  52		     2		PUSH	EDX
 00000118  8B 55 10	     2		MOV		EDX, [EBP+16]
 0000011B  E8 00000000 E     2		CALL	WriteString
 00000120  5A		     2		POP		EDX
 00000121  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000124  B9 0000000C	     1		MOV		ECX, STRING_BUFFER
 00000129  E8 00000000 E     1		CALL	ReadString
 0000012E  8B 7D 14	     1		MOV		EDI, [[EBP+20]]
 00000131  89 07	     1		MOV		[EDI], EAX
 00000133  58		     1		POP		EAX
 00000134  59		     1		POP		ECX
 00000135  5A		     1		POP		EDX

					;mDisplayString [EBP+12]

 00000136  8B 5D 14			MOV		EBX, [EBP+20]
 00000139  8B 0B			MOV		ECX, [EBX]
 0000013B  8B 75 0C			MOV		ESI, [EBP+12]

 0000013E  FC				CLD
 0000013F  AC				LODSB
 00000140  BA 00000000			MOV		EDX, 0
 00000145  3C 2D			CMP		AL, ASCII_MINUS
 00000147  75 05			JNE		_skipNegative
 00000149  BA 00000001			MOV		EDX, 1

 0000014E			_skipNegative:
 0000014E  8B 75 0C			MOV		ESI, [EBP+12]
 00000151  03 F1			ADD		ESI, ECX
 00000153  4E				DEC		ESI

 00000154  FD				STD

 00000155  BF 00000000			MOV		EDI, 0
 0000015A  BB 00000001			MOV		EBX, 1
 0000015F			_loopBuildInt:
 0000015F  AC				LODSB
 00000160  3C 2B			CMP		AL, ASCII_PLUS
 00000162  74 35			JE		_endPositive
 00000164  3C 2D			CMP		AL, ASCII_MINUS
 00000166  74 2E			JE		_endNegative
 00000168  3C 30			CMP		AL, ASCII_0
 0000016A  7C 32			JL		_error
 0000016C  3C 39			CMP		AL, ASCII_9
 0000016E  7F 2E			JG		_error
 00000170  2C 30			SUB		AL, ASCII_0
 00000172  0F B6 C0			MOVZX	EAX, AL
 00000175  83 FA 01			CMP		EDX, 1
 00000178  75 02			JNE		_skipInitialNegation
 0000017A  F7 DB			NEG		EBX
 0000017C			_skipInitialNegation:
 0000017C  F7 EB			IMUL	EBX
 0000017E  03 F8			ADD		EDI, EAX
 00000180  70 1C			JO		_error
 00000182  8B C3			MOV		EAX, EBX
 00000184  BB 0000000A			MOV		EBX, 10
 00000189  F7 EB			IMUL	EBX
 0000018B  8B D8			MOV		EBX, EAX
 0000018D  BA 00000000			MOV		EDX, 0
 00000192  E2 CB			LOOP	_loopBuildInt
 00000194  EB 06			JMP		_endBuildInt

 00000196			_endNegative:
 00000196  49				DEC		ECX
 00000197  EB 03			JMP		_endBuildInt

 00000199			_endPositive:
 00000199  49				DEC		ECX
 0000019A  EB 00			JMP		_endBuildInt

 0000019C			_endBuildInt:
 0000019C  E3 0F			JECXZ	_success
 0000019E			_error:
					mDisplayString [EBP+24]
 0000019E  52		     1		PUSH	EDX
 0000019F  8B 55 18	     1		MOV		EDX, [EBP+24]
 000001A2  E8 00000000 E     1		CALL	WriteString
 000001A7  5A		     1		POP		EDX
 000001A8  E9 FFFFFF67			JMP		_getNewString

 000001AD			_success:

 000001AD  8B C7			MOV		EAX, EDI

 000001AF  8B 7D 08			MOV		EDI, [EBP+8]
 000001B2  89 07			MOV		[EDI], EAX

 000001B4  61				POPAD
 000001B5  5D				POP		EBP
 000001B6  C2 0014			RET		20
 000001B9			ReadVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Prints a given SDWORD integer to console
				;
				; Postconditions: [[ebp+8]] will be overwritten with string value of [ebp+12]
				;
				; Receives:
				; [ebp+12]		= signed integer value to print to console
				; [ebp+8]		= address of string array which will be changed to string value of number
				; STRING_BUFFER, ASCII_0, ASCII_9, ASCII_PLUS, and ASCII_MINUS are global constants
				; ---------------------------------------------------------------------------------
 000001B9			WriteVal PROC
 000001B9  55				PUSH	EBP
 000001BA  8B EC			MOV		EBP, ESP
 000001BC  60				PUSHAD

 000001BD  8B 7D 08			MOV		EDI, [EBP+8]
 000001C0  FC				CLD



 000001C1  8B 75 0C			MOV		ESI, [EBP+12]
 000001C4  83 FE 00			CMP		ESI, 0
 000001C7  7D 08			JGE		_skipNegation
 000001C9  B8 0000002D			MOV		EAX, ASCII_MINUS
 000001CE  AA				STOSB
 000001CF  F7 DE			NEG		ESI

 000001D1			_skipNegation:

 000001D1  B9 00000009			MOV		ECX, STRING_SIZE-2
 000001D6  B8 00000001			MOV		EAX, 1
 000001DB  BB 0000000A			MOV		EBX, 10
 000001E0			_loopDivisor:
 000001E0  F7 EB			IMUL		EBX
 000001E2  E2 FC			LOOP	_loopDivisor

 000001E4  8B D8			MOV		EBX, EAX

 000001E6			_loopDigit:
 000001E6  8B C6			MOV		EAX, ESI
 000001E8  3B D8			CMP		EBX, EAX
 000001EA  7F 09			JG		_skipStore
 000001EC  99				CDQ
 000001ED  F7 FB			IDIV	EBX
 000001EF  8B F2			MOV		ESI, EDX
 000001F1  83 C0 30			ADD		EAX, ASCII_0
 000001F4  AA				STOSB
 000001F5			_skipStore:
 000001F5  83 FB 01			CMP		EBX, 1
 000001F8  76 0E			JBE		_endLoopDigit
 000001FA  8B C3			MOV		EAX, EBX
 000001FC  BB 0000000A			MOV		EBX, 10
 00000201  99				CDQ
 00000202  F7 FB			IDIV	EBX
 00000204  8B D8			MOV		EBX, EAX
 00000206  EB DE			JMP		_loopDigit

 00000208			_endLoopDigit:
 00000208  B8 00000000			MOV		EAX, 0
 0000020D  AA				STOSB

					mDisplayString [EBP+8]
 0000020E  52		     1		PUSH	EDX
 0000020F  8B 55 08	     1		MOV		EDX, [EBP+8]
 00000212  E8 00000000 E     1		CALL	WriteString
 00000217  5A		     1		POP		EDX

 00000218  61				POPAD
 00000219  5D				POP		EBP
 0000021A  C2 0008			RET		8
 0000021D			WriteVal ENDP

 0000021D			WriteValOld PROC
 0000021D  55				PUSH	EBP
 0000021E  8B EC			MOV		EBP, ESP
 00000220  60				PUSHAD

 00000221  B9 0000000B			MOV		ECX, STRING_SIZE
 00000226  49				DEC		ECX

 00000227  8B 7D 08			MOV		EDI, [EBP+8]
 0000022A  83 C7 0B			ADD		EDI, STRING_SIZE
 0000022D  4F				DEC		EDI
 0000022E  FD				STD

 0000022F			_loopDigit:
 0000022F  8B C6			MOV		EAX, ESI
 00000231  BB 0000000A			MOV		EBX, 10
 00000236  99				CDQ
 00000237  F7 FB			IDIV	EBX
 00000239  8B F0			MOV		ESI, EAX
 0000023B  83 C2 30			ADD		EDX, ASCII_0
 0000023E  8B C2			MOV		EAX, EDX
 00000240  AA				STOSB
 00000241  49				DEC		ECX
 00000242  83 FE 00			CMP		ESI, 0
 00000245  7F E8			JG		_loopDigit
					
 00000247  B8 0000002A			MOV		EAX, 42
 0000024C  BB 00000000			MOV		EBX, 0
 00000251			_loopNull:
 00000251  AA				STOSB
 00000252  43				INC		EBX
 00000253  E2 FC			LOOP	_loopNull


					mDisplayString [EBP+8]
 00000255  52		     1		PUSH	EDX
 00000256  8B 55 08	     1		MOV		EDX, [EBP+8]
 00000259  E8 00000000 E     1		CALL	WriteString
 0000025E  5A		     1		POP		EDX

 0000025F  61				POPAD
 00000260  5D				POP		EBP
 00000261  C2 0008			RET		8
 00000264			WriteValOld ENDP

				; ---------------------------------------------------------------------------------
				; Name: ArraySum
				;
				; Calculates the sum of a given SDWORD integer array
				;
				; Preconditions: [ebp+16] is an SDWORD array populated with signed integers
				;
				; Receives:
				; [ebp+16]		= address of sdword array to sum
				; [ebp+12]		= number of elements in sdword array
				; [ebp+8]		= (output) address of SDWORD variable to store result
				; ---------------------------------------------------------------------------------
 00000264			ArraySum PROC
 00000264  55				PUSH	EBP
 00000265  8B EC			MOV		EBP, ESP
 00000267  60				PUSHAD

 00000268  8B 75 10			MOV		ESI, [EBP+16]
 0000026B  8B 7D 08			MOV		EDI, [EBP+8]

 0000026E  8B 4D 0C			MOV		ECX, [EBP+12]
 00000271			_loopSum:
 00000271  8B 06			MOV		EAX, [ESI]
 00000273  01 07			ADD		[EDI], EAX
 00000275  83 C6 04			ADD		ESI, 4
 00000278  E2 F7			LOOP	_loopSum

 0000027A  61				POPAD
 0000027B  5D				POP		EBP
 0000027C  C2 000C			RET		12
 0000027F			ArraySum ENDP


				END main
Microsoft (R) Macro Assembler Version 14.37.32825.0	    12/07/23 14:34:03
&String Converter   (Proj6_frenchp.asm			     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000001D8 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000027F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArraySum . . . . . . . . . . . .	P Near	 00000264 _TEXT	Length= 0000001B Public STDCALL
  _loopSum . . . . . . . . . . .	L Near	 00000271 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000110 _TEXT	Length= 000000A9 Public STDCALL
  _getNewString  . . . . . . . .	L Near	 00000114 _TEXT	
  _skipNegative  . . . . . . . .	L Near	 0000014E _TEXT	
  _loopBuildInt  . . . . . . . .	L Near	 0000015F _TEXT	
  _skipInitialNegation . . . . .	L Near	 0000017C _TEXT	
  _endNegative . . . . . . . . .	L Near	 00000196 _TEXT	
  _endPositive . . . . . . . . .	L Near	 00000199 _TEXT	
  _endBuildInt . . . . . . . . .	L Near	 0000019C _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000019E _TEXT	
  _success . . . . . . . . . . .	L Near	 000001AD _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteValOld  . . . . . . . . . .	P Near	 0000021D _TEXT	Length= 00000047 Public STDCALL
  _loopDigit . . . . . . . . . .	L Near	 0000022F _TEXT	
  _loopNull  . . . . . . . . . .	L Near	 00000251 _TEXT	
WriteVal . . . . . . . . . . . .	P Near	 000001B9 _TEXT	Length= 00000064 Public STDCALL
  _skipNegation  . . . . . . . .	L Near	 000001D1 _TEXT	
  _loopDivisor . . . . . . . . .	L Near	 000001E0 _TEXT	
  _loopDigit . . . . . . . . . .	L Near	 000001E6 _TEXT	
  _skipStore . . . . . . . . . .	L Near	 000001F5 _TEXT	
  _endLoopDigit  . . . . . . . .	L Near	 00000208 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000110 Public STDCALL
  _getNumber . . . . . . . . . .	L Near	 0000002E _TEXT	
  _displayNumbers  . . . . . . .	L Near	 0000006E _TEXT	
  _skipDelimiter . . . . . . . .	L Near	 0000008B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ASCII_0  . . . . . . . . . . . .	Number	 00000030h   
ASCII_9  . . . . . . . . . . . .	Number	 00000039h   
ASCII_MINUS  . . . . . . . . . .	Number	 0000002Dh   
ASCII_PLUS . . . . . . . . . . .	Number	 0000002Bh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INT_ARRAY_SIZE . . . . . . . . .	Number	 0000000Ah   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
STRING_BUFFER  . . . . . . . . .	Number	 0000000Ch   
STRING_SIZE  . . . . . . . . . .	Number	 0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgText  . . . . . . . . . . . .	Byte	 0000014B _DATA	
avgValue . . . . . . . . . . . .	DWord	 000001D0 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
delimiter  . . . . . . . . . . .	Byte	 0000018E _DATA	
error  . . . . . . . . . . . . .	Byte	 000000F8 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell . . . . . . . . . . . .	Byte	 00000177 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions1  . . . . . . . . .	Byte	 00000028 _DATA	
instructions2  . . . . . . . . .	Byte	 00000089 _DATA	
intArray . . . . . . . . . . . .	DWord	 000001A4 _DATA	
intString  . . . . . . . . . . .	Byte	 00000194 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linebreak  . . . . . . . . . . .	Byte	 00000191 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
programIntro . . . . . . . . . .	Byte	 00000000 _DATA	
prompt . . . . . . . . . . . . .	Byte	 000000D8 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumText  . . . . . . . . . . . .	Byte	 0000012D _DATA	
sumValue . . . . . . . . . . . .	DWord	 000001CC _DATA	
summary  . . . . . . . . . . . .	Byte	 00000110 _DATA	
userInt  . . . . . . . . . . . .	DWord	 000001A0 _DATA	
userLength . . . . . . . . . . .	DWord	 000001D4 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
